# Use the latest 2.1 version of CircleCI pipeline process engine.
# See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1

# Orbs are reusable packages of CircleCI configuration that you may share across projects, enabling you to create encapsulated, parameterized commands, jobs, and executors that can be used across multiple projects.
# See: https://circleci.com/docs/2.0/orb-intro/
orbs:
  ruby: circleci/ruby@0.1.2

# Define a job to be invoked later in a workflow.
# See: https://circleci.com/docs/2.0/configuration-reference/#jobs
jobs:
  build:
    docker:
      - image: circleci/ruby:2.6.3-stretch-node
    executor: ruby/default
    steps:
      - checkout
      - run:
          name: Which bundler?
          command: bundle -v
      - ruby/bundle-install
      - run: 
          name: set credentials
          command:  |
            mkdir -p $HOME/.gem
            touch $HOME/.gem/credentials
            chmod 0600 $HOME/.gem/credentials
            printf -- "---\n:github: Bearer ${GITHUB_TOKEN}\n" > $HOME/.gem/credentials
      - run:
          name: build gem
          command:
            gem build hola.gemspec
      - run:
          name: update gem with naming convention
          command:  |
            CURRENT_YEAR=$(date +%Y)
            CURRENT_MONTH=$(date +%m)
            VERSIONTAG=$CURRENT_YEAR.$CURRENT_MONTH.${CIRCLE_BUILD_NUM}.gem
            for i in `ls *.gem`; do mv $i spoonflower_core-$VERSIONTAG; done  
      - run:
          name: publish gem to github packages
          command:  |
            mygem=$(ls *.gem)
            echo $mygem
            gem push --KEY github --host https://rubygems.pkg.github.com/j-worr $mygem

# Invoke jobs via workflows
# See: https://circleci.com/docs/2.0/configuration-reference/#workflows
workflows:
  sample: # This is the name of the workflow, feel free to change it to better match your workflow.
    # Inside the workflow, you define the jobs you want to run.
    jobs:
      - build:
          context:
            - my_context
